
PI PRESENTS
===========

Pi Presents is a presentation application for intended for museums and visitor centres but it has many other uses.

The main aims are:

*    The animation/interpretation of exhibits by triggering a sound, video, or slideshow from a PIR or button.

*    A kiosk like display for a visitor centre with the following which can used seperately or be combined.

*   Display a media show containing images, text, audio tracks, and videos.

 *   Display a menu of media which can be selected by the use buttons or keyboard, then played with pause and stop facilities.

*    The giving of presentations where progress is controlled by buttons or keyboard. The presentation may include images, text, audio tracks and videos.
 

The application is primarily aimed at small concerns -  museums, visitor centres, schools -  that do not have a LAN or computer experts. Operation is simple, stand alone, and flexible:

* All media and configuration options are kept on a removable usb stick and can edited on a Windows PC using an easy to use editor application. Once set up for your choice of black box facilities the Pi's SD Card will not need to be modified.

* A mouse is not required for operation of Pi Presents so a hub is not required even if a USB Stick is used.

* GPIO control is by switches, buttons or PIR switched to 0 volts. It is straighforward to make your own controls in a box containing the Pi, or perhaps a wired remote. Configurable software de-bouncing is provided.

* Video is selectable between HDMI or composite using the normal Pi setup procedure. Audio output is selectable on a per track basis. Ampliification and volume control will need to be provided by hardware to suit the application.

* If a LAN is available configuration data and media can easily be FTP'ed to Pi Presents. Media and config from a remote?????

PI Presents, out of the box, runs as a desktop application on the Raspberry Pi using the keyboard for control. However with a little bit of Linux magic it can be made to run as a black box application with control from GPIO, full instructions are given below. Black box facilities include:

* Disabling screen blanking

* Fullscreen operation without window decorations

* Black screen behind videos

* Operation wihout a keyboard and mouse

* Optional operation with pushbuttons or PIR through GPIO

* Automatic startup when power is applied to the Pi

* All media can be on a USB stick

* Safe shutdown without keyboard or mouse

While Pi Presents is easy to set up for the majority of tasks using the editor application; it also has a powerful presentation language allowing complex combinations of media shows to be produced and triggered.


INSTALLATION
============

* Install PIL (Python Imaging Library)

   sudo apt-get install python-imaging
   sudo apt-get install python-imaging-tk

* Download and install p-expect as specified here ????

* Download Pi Presents from github as follows:????????

Now run Pi Presents  to check the installation is successful. From a terminal window opened in the pipresents directory type python pipresents.py  You will see a Welcome message. To exit Pi Presents type CTRL-Break or close the window.

Now run pipresents.py  from the desktop to see the first of the examples which is in /p_home/pp_profiles/pp_profile. It can be fully controlled from the keyboard.

Later sections describe how you can make Pi Presents into a black box fullscreen player.


EXAMPLES
========

For first time users download the examples from the pipresents_examples github repository. Open the download and copy pp_home and all its sub_diectories into your home/pi directory.

 Type python pipresents.py - s /home/pi from a terminal window opened in the pipresents directory. You will see a continuous looping show containing two images and one video.

I have provided some examples of how to configure PiPresents. The examples are in the directories pp_home/pp_profiles. Each profile describes a type of show.

pp_profile - A mediashow, the profile you have just run.
pp_menu - A menu.
pp_exhibit - A single shot video track triggered by a key.
pp_interactive - a mediashow and menu combined.
pp_presentation - The mediashow in pp_profile configured as a presentation.

All examples use the same media tracks which are in pp_home/media

pp_profile is the default profile. To run the other examples use 'python pipresents.py -s /home/pi -p /pp_profiles/pp_menu' etc.

The keyboard commands you will need are:

* Up, Down Cursor- move through a menu
* Left Right Cursor - move through a presentation or skip to the next track in a mediashow
* Return - Play the selected menu entry.
* Escape - Back a level
* In a video or audio track p or spacebar- pause/resume, Escape to stop.
* CTRL-Break always exits Pi Presents

To see how Pi Presents is configured look in the directory pp_profiles/pp_interactive. The files config.cfg, menu.json, and mediashow.json control the operation of Pi Presents for this application. All are human readable and editable files.


CONFIGURING AN APPLICATION
==========================

A profile contains the information needed to define a single application of Pi Presents. There needs to be a pp_showlist.json file and one or more medialist (.json) files. A profile is stored in a directory. By default the profile used is in the directory pp_profiles/pp_profile. You have already seen how a command line option can change the profile to be used. All Pi Presents profiles should be kept in the directory pp_profiles which is in the directory pp_home.

For portability all media should also be kept in the directory pp_home, but this is not essential. Media can be kept anywhere. If you have more than one profile it may best to keep the media for each profile in a seperate directory.

There is a pp_home is in the pipresents directory, but this should not be used as it contains internal data. Using command line options it can be situated elsewhere.

Medialist (.json) files define the content each show and some per track configuration options. Shows of the pp_showlist.json file define the look and feel of the shows in an application and how they link together.

Currently there are two types of show, mediashow and menu.

The pp_showlist file contains a number of shows, a 'start' show and a number of sections each defining a show

Start Show
------------
This must be present and serves just to initiate the first user defined show.
    title = First Show
	show-ref = start			  #The label for the show, every show must have one. it is used to reference the sow from others and from tracks
	type = start				# a special type
	start-show = myfirstshow       # The label of the show in ppshowlist.json defining the show.


Configuring a Mediashow or Presentation
---------------------------------------
A 'Media show' is a sequence of one or more  images, videos, messages, menus, mediashows or soundtracks. The content is defined by a medialist (.json) file. A show in pp_showlist.json defines the look and feel of the show. 

Mediashows have the following fields, the syntax of the fields is json:

	title = My First Show					# Text describing the show displayed in the editor or menus.
    show-ref = myfirstshow					# a label by which the show can be referenced
	type = mediashow
	medialist = mymedia.json              # The medialist that specfies the media for the show.
    
	# How the show is to be run        
	trigger  = start   		# how the media show is started
                                        # start - start when programmed
                                        # pir - wait for  a trigger from a PIR,
                                        # button - wait for  pressing the Play button or Return key. 
							
	repeat = interval       # How the media show is repeated. Note: mediashows with random sequence run continuously, use sequence = ordered if you want oneshot or interval operation.
                                        # oneshot - mediashow is run once
                                        # interval - run at intervals
	repeat-interval = 10	# The gap between the start of one mediashow and the start of the next in seconds. If value is less than the length of the show play will be continuous. A value of 0 will give a continuous repeat of the show.
	
	progress = auto      	# How the show progresses between tracks.
                                        # manual - Pi presents will wait for next/previous keys/buttons between tracks. Messages are displayed at the start of a show.
                                        # auto - tracks play continuously. 
							
	sequence = ordered		# sequence of tracks
                                            # ordered - played in the order of the medialist
                                            # random - random slection. Note: random sequences do not end (See repeat) (not implemented)


	# Mediashows can optionally provide an entry point for a menu. If the Return key or Play button is pressed the menu will be started. The mediashow will continue when the menu terminates.						
	has-child = yes     	# yes,no - Used for a mediashow only - it allows a menu to be entered from this show.
	child-show = mymenu     # reference of the menu that is entered from this show. It is the name of section in the config.cfg file

	# A hint is a line of text displayed near the bottom of the screen. Used normally as a hint on the existence of a menu and how to enter it.
	hint-text = "Press Play to.."	     # The text
	hint-font = Helvetica 30 bold     # Its Font
	hint-colour = white                     # and colour
	hint-y = 100                                # distance of the text from the bottom of the screen (pixels)

    # Tracks need some configuration information if not specified in medialist
    transition = cut		        # Type of transition between tracks. Overriden by medialist
                                            # cut, fade, slide, crop. Only cut works until PP gets GPU acceleration. Others are implemented as an experiment, but incorrectly.
	duration = 5    		        # How long an image is displayed in seconds. A value of 0 displays continuously. Overriden by medialist
	omx-audio = local               # sound output channel for any track played by omxplayer from the show, overriden by medialist
	omx-other-options = -t on     # other options for omxplayer (care required to avoid have a nice day!)
    
CONFIGURING A MENU
------------------
A commented example of a section of config.cfg defining a menu follows:

	[mymenu]
    type = menu
    show-ref = mymenu                         #same name as section header
	medialist = themenu.json 	  # The medialist that specfies the media for the menu

    #configure the menu
	menu-x = 300					# x position of the start of the first line of the menu (pixels)
	menu-y = 250					# y position of the start of the first line of the menu
	menu-spacing = 70    				# gap between menu entries (top to top)
	entry-font = Helvetica 30 bold
	entry-colour = black
	entry-select-colour = red		# colour when the entry selected
	timeout = 60                     # seconds, 0 for no timeout. If there is no activity on the menu Pi presents automatically goes back to the previous display.
    has background = yes		  # yes,no. If yes an image is displayed  behind the menu. The image is defined in the medialist with the label pp-menu-background.

    #tracks played from a menu need some configuration if not supplied in the medialist
    transition = cut                 # see mediashow for values
    duration = 10               # see mediashow for values
    omx-audio = hdmi            # hdmi/local/<blank>. sound output channel for any track played by omxplayer from the show
    omx-other-options =  -t on   # other options for omxplayer (care required)

	# Menus cannot have children, the hint is used for track playing instructions.
	hint-text = "To Play..."
	hint-font = Helvetica 30 bold
	hint-colour = white
	hint-y = 100                        # distance of the text from the bottom of the screen (pixels)
    
    # bits and bobs
	background-music =             #not yet implemented


MEDIALISTS
----------

Medialists define the content of a show. Each entry is a 'track'. Tracks can be of various types:

* image - a still image. Image types are currently those that can be rendered by the Python Imaging Library.
* video - a track played by omxplayer. Track types depend on the codec licences purchased from the Foundation but include mp3.
* audio - an audio track played by aplayer on some such. This is currently not implemented, the aim is to enable a number of parallel asynchronous tracks to be played from one Pi.
* message - displays a few lines of text from a file against a black background. Also used to display a blank screen
* text  - a text file with some sort of simple markup (not yet implemented)
* mediashow - shows can be used as tracks. A use of this might be a a menu of mediashows or presentations
* menu - menus can be used as tracks. This facility could be used for sub-menus of maybe a menu as one item in a mediashow.

The leading + sign in file paths provides portabiity by allowing tracks to be specified relative to the pp_home directory. If a plus sign is not present then the path must be absolute.

Some medialist entries will have labels defined by the key track-ref. If the label is blank then the track is included in the menu or medialist. if the label is not blank then the trask is used for a special purpose. Currently there is one special purpose; the background image for a menu which has the label pp-menu-background. Labels will be used in the future to respond to asynchronous events.

An example of a medialist with a entry for each type of track follows:

Note the commas, json is finnicky and does not allow a comma after the last item in a bracket. Single and double quotes are not interchangeable.  Also that COMMENTS ARE NOT BE ALLOWED IN JSON.
  {
  "tracks":
	[
	 {
	  "track-ref": "",						# a lable for the track - blank so the track is included in a menu or mediashow.
	  "type": "image",
	  "location": "+/media/sarename.gif",    # the filename of the track
	  "duration": "5", 						 # if omitted then the value in the calling section of the config.cfg file is used.
      "transition": "cut"                     # if omitted then the value in the calling section of the config.cfg file is used.
	  "title": "Sarename" 						# diaplayed on a menu and the editor
	 }, 
	 {
	 "track-ref": "",						# a lable for the track - blank so the track is included in a menu or mediashow.
	  "type": "video",
	  "omx-audio": "local", 					# hdmi/local/<blank>, if blank the audio in the calling section of the pp_showlist.json file is used 
	  "location": "+/media/xthresh.mp4", 
	  "title": "Threshing" 
	 },
    {
	  "track-ref": "",						# a label for the track - blank so the track is included in a menu or mediashow.
	  "type": "message",
	  "title": "message from the author",             # displayed in menu entry and editor
      "duration": "5",                                # in seconds. if 0 then message is displayed until terminated by user input. If omitted then the value in the calling section of the pp_showlist.json is used.
      "message-font": "Helvetica 30 bold",
      "message-colour": "white",
	  "text": "Text to Display"
	 },
    {
	  "track-ref": "",						# a label for the track - blank so the track is included in a menu or mediashow.
	  "type": "show",					    #  
	  "sub-show": "myothershow", 			# name of a section of the pp_showlists.json file fp the show to be run.	
	  "title": "My Other Show" 
	 },
	 {
	  "track-ref": "pp-child-show",			# a label for the track - this specities the child show.
	  "type": "show",					    #  
	  "sub-show": "myothershow", 			# name of a section of the pp_showlists.json file fp the show to be run.	
	  "title": "My Child Show" 
	 },
	 {
	  "track-ref": "pp-menu-background",	# a label for the track - this specifies the backgroud image for a menu.
	  "type": "image",
	  "location": "+/media/sarename.gif",    # the filename of the track
	  "title": "Menu Background" 			# displayed by the editor
	 }, 
	]
  }


PP_EDITOR - THE PI PRESENTS PROFILE EDITOR
===========================================

Configuration uses a separate program which can be run on the Pi, on a Linux machine, or on a Windows PC.

 TBD

UPDATING PI PRESENTS
===============
Download  pipresents from github and copy it into the pipresents folder.


MOVING TO BLACK BOX OPERATION
=============================

There are a number of things to set up to make Pi Presents into a full screen, auto starting, GPIO controlled application. You do not need to use them all.


Error Reporting and Logging
---------------------------------------
If Pi presents is started from a Terminal Window all erros and logs are showin in that window.

Errors and log, and exceptions are also reported in the files pp_log.log and pp_exceptions.log respectively. These appear in the pipresents directory of if Pi presents is run from autostart when power is applied in the /home/pi directory. 

Command Line Options
---------------------------------

python pipresents.py -h will show the command line options

Options:
	-g  --gpio
						Use the GPIO for buttons or external triggers such as a PIR.
						To use this Pi Presents must be run as root 
						i.e. sudo python pipresents.py -g. 
						The keyboard can still be used if gpio is enabled.

	-b  --noblank
						Disable screen blanking. For this to function x11-server-utils must have been installed.

	-f  --fullscreen
						Run Pi Presents in full screen mode. For this to function it must be set up as described below.

	-u  --usbstick
						Path to the Pi Presents 'home' directory on a usb stick.
						e.g. /media/KINGSTON. 
								  
	-s  --sdcard
						Path to the Pi Presents 'home' directory' on the SD card (alternative to the pipresents directory)
						e.g. /home/pi/my_data
                        
    -d --debug
                        Run tine errors are always reported to the terminal window if open. Turning on debugging will in addition provide a log of the operation of Pi Presents.



Using GPIO to Control Pi Presents
---------------------------------
Use of GPIO is enabled using the --gpio command option.

If GPIO is used then the command starting Pi Presents must be preceeded by sudo.

The following Pins of the GPIO Connector 1 correspond to the keyboard keys

    Maint                P1-12  No direct keyboard equivalent, used with other keys for various maintenance purposes
    Down                P1-15  Down or Left
    Up                     P1-16  Up or Right
	Play                   P1-18  Play
	Pause                P1-22  'p ' used during video and audio playing
	Stop/Back         P1-7    Escape

In addition P1-11 is used for the PIR.  ????

The Maint Button P1-12 initiates the following functions. Maint should be pressed while holding the following button down:

Stop  - Exit Pi Presents and shut down the Pi.

The GPIO ports are set up as leading edge triggered inputs with internal pull-up resistors. Push buttons should be mechanical and connected to 0 volts  (P1-???? or ???) and have a 330 ohm resistor is series to protect them should they inadvertently be used as outputs. PIR's should have relay contacts and be connected in a similar manner.

    Pi INPUT ----- 330R ----- contact---- 0 volts


There is software contact de-bouncing which is set with a small hysteresis. If you get trouble with contact bounce increase the THRESHOLD of the appropriate pin by modifying pp_buttons.py


Disable Screen Blanking
-----------------------
To disable screen blanking you must first install xset which is part of the x server utilities package.

  sudo apt-get install x11-xserver-utils

You can than use the --noblank command option to disable screen blanking.


Make Pi Presents Occupy the Whole Screen
----------------------------------------------------
First move the Taskbar and minimize it:
* Right click on the Taskbar and select Panel settings
* Select the Geometry Tab
    Click on the 'left' button
*Select the Appearance  Tab
    Select Solid colour and, choose black with 100% opacity
* Select the Advanced Tab
      Set 'minimise panel when not in use' to on
      Set 'Size when minimized' to 2 pixels

Now change the Openbox configuration so it removes window decorations for Pi Presents only (when -f option used):

* Edit the file /home/pi/.config/openbox/lxde-rc.xml to add the following after the line <applications>
    <application name="fspipresents">
         <decor>no</decor>
    </application>

  which can be done as user Pi. I suggest you make a backup first by copying into lxde-rc.xml.bak

* You can then use the --fullscreen command option to switch fullscreen on or off.

  
To Start Pi Presents when Power is Applied to the Pi
------------------------------------------------------------------------

This will work only if you have set 'boot to desktop' using raspi-config.

* Create the folder home/pi/.config/lxsession/LXDE/

* Note: .config is already present in the image but you will need to select 'Show Hidden files' in the Filemanager to see it.

* In this folder put a file named autostart containing one line:

        e.g. python /home/pi/pipresents/pipresents.py <options>

* make the autostart file executable.


To use a Home directory other than the default
------------------------------------------------------------------

Use the --usbstick and/or the --sdcard command line options. An option value of '/media/KINGSTON' will expect the profiles to be in '/media/KINGSTON/pp_home/pp_profiles'. 

Pi Presents can have up to two levels of reversion for finding home directories other than the default:

*  If the --usbstick option is present and the specified directory is found it will be used.
 
*  Otherwise if the --sdcard option is present and the specified directory can be found it will be used.

*  Otherwise the profile in the same directory as pipresents.py is used. 

Raspbian will automount USB sticks if they are present at power on, or plugged in afterwards, and will take the mount point from the name of the drive on the stick.  If using more than one usb stick they may need renaming and Windows converts any drive name to capitals.


To Shutdown the Raspberry Pi from the GPIO
------------------------------------------

Press the Shutdown button for more than 5 seconds. Pi Presents will tidy itself up shut down the Pi.



HARDWARE REQUIREMENTS
=====================

Pi Presents can be used with either Rev 1 or Rev 2 Pi's. The GPIO pins have been chosen such that they are version agnostic. Works with 256MB with big slides??????

Use the HDMI or 3.5mm jack output for audio. Amplification and volume control will need to be provided in external hardware to suit the application.


KNOWN PROBLEMS
============

Permission to write to pp_log.log and pp_exceptions.log is denied.
-------------------------------------------------------------------------------------------
The files pp_log.log and pp_exceptions.log are created in the directoy fro which the python pipresents.py command was issued and with the user currently employed. if sudo was used in the first comand the files are owned by root. Delee the files and then create with user Pi or run pipresents.py without sudo 
